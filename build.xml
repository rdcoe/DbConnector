<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="."
         default="dist"
         name="dbconnector"
         xmlns:if="ant:if"
         xmlns:unless="ant:unless">

	<property name="version" value="1.0.0" />
	<property environment="env" />

	<property name="src.dir" value="src" />
	<property name="test.dir" value="test" />
	<property name="integration.tests.dir" value="${test.dir}/integration" />
	<property name="stub.tests.dir" value="${test.dir}/stubs" />
	<property name="test.utils.dir" value="${test.dir}/utils" />
	<property name="build.dir" value="build" />
	<property name="lib.dir" value="lib" />
	<property name="dist.dir" value="dist" />
	<property name="dist.jar" value="dbconnector.jar" />
	<property name="junit.dir" value="junit" />
	<property name="instrumented.dir" value="${junit.dir}/instrumented" />
	<property name="coveragereport.dir" value="${junit.dir}/coverage" />
	<property name="cobertura.ser" value="${instrumented.dir}/cobertura.ser" />
	<property name="debuglevel" value="source,lines,vars" />
	<property name="target_ver" value="1.7" />
	<property name="source_ver" value="1.7" />

	<!-- default the datasource to use H2 unless an environment variable is set -->
	<property name="env.datasource.arg" value="-d H2" />

	<!-- import special task to deploy dependent jars within dist -->
	<property name="one-jar.dist.dir" value="${lib.dir}/one-jar" />
	<import file="${one-jar.dist.dir}/one-jar-ant-task.xml" optional="true" />

	<path id="common.classpath">
		<pathelement location="${lib.dir}/commons/commons-dbutils-1.4.jar" />
		<pathelement location="${lib.dir}/commons/commons-io-2.4.jar" />
		<pathelement location="${lib.dir}/commons/commons-naming-core-20031116.223527.jar" />
		<pathelement location="${lib.dir}/h2/h2-1.3.167.jar" />
		<pathelement location="${lib.dir}/postgres/postgresql-9.1-901.jdbc4.jar" />
		<pathelement location="${lib.dir}/postgres/tomcat-jdbc.jar" />
		<pathelement location="${lib.dir}/logging/tomcat-juli.jar" />
		<pathelement location="${lib.dir}/logging/slf4j-api-1.7.7.jar" />
	</path>

	<path id="logging.classpath">
		<pathelement location="${lib.dir}/logging/slf4j-log4j12-1.7.7.jar" />
		<pathelement location="${lib.dir}/logging/log4j-1.2.17.jar" />
	</path>

	<path id="testing.classpath">
		<pathelement location="${build.dir}" />
		<pathelement location="${integration.tests.dir}" />
		<pathelement location="${stub.tests.dir}" />
		<pathelement location="${junit.dir}" />
		<pathelement location="${lib.dir}/logging/slf4j-nop-1.7.7.jar" />
		<pathelement location="${lib.dir}/junit/junit-4.10.jar" />
		<pathelement location="${lib.dir}/powermock-easymock/cglib-nodep-2.2.2.jar" />
		<pathelement location="${lib.dir}/powermock-easymock/easymock-3.1.jar" />
		<pathelement location="${lib.dir}/powermock-easymock/javassist-3.16.1-GA.jar" />
		<pathelement location="${lib.dir}/powermock-easymock/objenesis-1.2.jar" />
		<pathelement location="${lib.dir}/powermock-easymock/powermock-easymock-1.4.12-full.jar" />
	</path>

	<path id="cobertura.classpath" cache="true">
		<pathelement location="${lib.dir}/coverage/cobertura-2.0.3.jar" />
		<pathelement location="${lib.dir}/coverage/asm-4.1.jar" />
		<pathelement location="${lib.dir}/coverage/asm-analysis-4.1.jar" />
		<pathelement location="${lib.dir}/coverage/asm-commons-4.1.jar" />
		<pathelement location="${lib.dir}/coverage/asm-tree-4.1.jar" />
		<pathelement location="${lib.dir}/coverage/asm-util-4.1.jar" />
		<pathelement location="${lib.dir}/coverage/oro-2.0.8.jar" />
		<pathelement location="${lib.dir}/logging/log4j-1.2.17.jar" />
	</path>

	<taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
	<target name="init">
		<mkdir dir="${build.dir}" />
	</target>

	<target name="clean">
		<delete dir="${build.dir}" />
		<delete dir="${dist.dir}" />
		<delete dir="${junit.dir}" />
		<delete dir="logs" />
		<delete>
			<fileset dir="." includes="*.db" />
		</delete>
	</target>

	<target name="cleanall" depends="clean">
		<delete>
			<fileset dir="." includes="*.db" />
		</delete>
	</target>

	<taskdef resource="net/sf/antcontrib/antcontrib.properties">
		<classpath>
			<pathelement location="${lib.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
		</classpath>
	</taskdef>

	<property name="appName" value="${ant.project.name}" />

	<!-- Debugging hook that will enable debugging during the build.  Ant must be started with a command line parameter -DDEBUG=true.
	     If set, any java task that includes two jvmarg values, set to ${jvmdebug1} and ${jvmdebug2}, will enable debugging. -->
	<if>
		<and>
			<istrue value="${DEBUG}" />
		</and>
		<then>
			<echo level="debug">debugging mode is active</echo>
			<property name="jvmdebug1" value="-Xdebug" />
			<property name="jvmdebug2"
			          value="-Xrunjdwp:transport=dt_socket,server=y,address=8888,suspend=y" />
		</then>
	</if>

	<!-- default jvmdebug values, in case the DEBUG environment variable isn't set to "true".  
	     Values are required, because of a bug in Ant  https://bz.apache.org/bugzilla/show_bug.cgi?id=50482
	-->
	<property name="jvmdebug1" value="-Xmx128m" />
	<property name="jvmdebug2" value="-Xms16m" />

	<include file="version.xml"
	         as="version"
	         description="Create the VersionInfo class that is used at runtime to display version info for the build" />

	<target name="generate-version">
		<antcall target="version.compile" />
	</target>

	<!-- IMPORTANT: compile target needs to depend on "generate-version" -->
	<target name="compile" depends="init,generate-version">
		<javac debug="true"
		       debuglevel="${debuglevel}"
		       destdir="${build.dir}"
		       source="${source_ver}"
		       target="${target_ver}"
		       includeantruntime="false">
			<src path="${src.dir}" />
			<exclude name="**/*Test.java" />
			<classpath refid="common.classpath" />
			<classpath refid="logging.classpath" />
		</javac>
		<copy todir="${build.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>
	</target>

	<target name="compile.tests" depends="compile">
		<mkdir dir="${junit.dir}" />
		<javac includes="**/*Test.java"
		       destdir="${junit.dir}"
		       source="${source_ver}"
		       target="${target_ver}"
		       debug="true"
		       debuglevel="${debuglevel}"
		       includeantruntime="false">
			<src path="${src.dir}" />
			<src path="${stub.tests.dir}" />
			<classpath refid="common.classpath" />
			<classpath refid="testing.classpath" />
			<classpath refid="logging.classpath" />
		</javac>
	</target>

	<target name="unit.tests" depends="compile.tests">
		<junit fork="yes"
		       forkmode="once"
		       dir="${junit.dir}"
		       printsummary="withOutAndErr"
		       haltonerror="true"
		       haltonfailure="true"
		       includeantruntime="true">
			<batchtest todir="${junit.dir}">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
			<classpath location="${test.dir}" />
			<classpath refid="common.classpath" />
			<classpath refid="testing.classpath" />
			<jvmarg value="-noverify" />
			<jvmarg value="${jvmdebug1}" />
			<jvmarg value="${jvmdebug2}" />
		</junit>

		<junitreport todir="${junit.dir}">
			<fileset dir="${junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.dir}" />
		</junitreport>
	</target>

	<target name="compile.itests" depends="compile">
		<mkdir dir="${junit.dir}" />

		<javac includes="**/*Test.java"
		       destdir="${junit.dir}"
		       source="${source_ver}"
		       target="${target_ver}"
		       debug="true"
		       debuglevel="${debuglevel}"
		       includeantruntime="false">
			<src path="${integration.tests.dir}" />
			<src path="${stub.tests.dir}" />
			<classpath refid="common.classpath" />
			<classpath refid="testing.classpath" />
			<classpath refid="logging.classpath" />
		</javac>
	</target>

	<target name="integration.tests" depends="compile.itests">
		<junit fork="yes"
		       forkmode="once"
		       dir="${junit.dir}"
		       printsummary="withOutAndErr"
		       haltonerror="true"
		       haltonfailure="true"
		       includeantruntime="true">
			<batchtest todir="${junit.dir}">
				<fileset dir="${integration.tests.dir}">
					<include name="**/*Test.java" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
			<classpath location="${test.dir}" />
			<classpath refid="common.classpath" />
			<classpath refid="testing.classpath" />

			<jvmarg value="${jvmdebug1}" />
			<jvmarg value="${jvmdebug2}" />
		</junit>

		<junitreport todir="${junit.dir}">
			<fileset dir="${junit.dir}">
				<include name="TEST-*.xml" />
			</fileset>
			<report format="frames" todir="${junit.dir}" />
		</junitreport>
	</target>

	<target name="test"
	        depends="unit.tests, integration.tests"
	        description="runs unit and integration tests" />

	<target name="coverage"
	        depends="test"
	        description="run tests and produce code coverage artifacts">
		<delete dir="${instrumented.dir}" failonerror="true" />
		<mkdir dir="${instrumented.dir}" />

		<!-- instrument the byte code that was compiled when unit tests are run -->
		<cobertura-instrument todir="${instrumented.dir}"
		                      datafile="${cobertura.ser}">
			<fileset dir="${build.dir}">
				<include name="**/*.class" />
			</fileset>
		</cobertura-instrument>

		<copy todir="${instrumented.dir}">
			<fileset dir="${src.dir}">
				<exclude name="**/*.java" />
			</fileset>
		</copy>

		<junit fork="yes"
		       dir="${instrumented.dir}"
		       printsummary="withOutAndErr"
		       haltonerror="true"
		       haltonfailure="true"
		       includeantruntime="true"
		       failureproperty="test.failure">
			<!--
                Specify the name of the coverage data file to use.
                The value specified below is the default.
            -->
			<sysproperty key="net.sourceforge.cobertura.datafile"
			             file="${cobertura.ser}" />

			<!--
                Note the classpath order: instrumented classes are before the
                original (uninstrumented) classes.  This is important.
            -->
			<classpath location="${instrumented.dir}" />
			<classpath refid="common.classpath" />
			<classpath refid="testing.classpath" />
			<classpath refid="cobertura.classpath" />
			<classpath refid="logging.classpath" />

			<batchtest todir="${instrumented.dir}">
				<fileset dir="${src.dir}">
					<include name="**/*Test.java" />
				</fileset>
				<fileset dir="${integration.tests.dir}">
					<include name="**/*Test.java" />
				</fileset>
				<formatter type="xml" />
			</batchtest>
			<jvmarg value="-noverify" />
			<jvmarg value="${jvmdebug1}" />
			<jvmarg value="${jvmdebug2}" />
		</junit>

		<mkdir dir="${coveragereport.dir}" />
		<cobertura-report format="xml"
		                  destdir="${coveragereport.dir}"
		                  datafile="${cobertura.ser}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>

		<cobertura-report format="html"
		                  destdir="${coveragereport.dir}"
		                  datafile="${cobertura.ser}">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cobertura-report>
	</target>


	<target name="dist"
	        depends="compile"
	        description="create distributable jar">
		<mkdir dir="${dist.dir}" />
		<delete file="${dist.jar}" />
		<jar destfile="${dist.dir}/${dist.jar}"
		     basedir="${build.dir}"
		     compress="true" />
	</target>

</project>
