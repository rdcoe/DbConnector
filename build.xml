<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project basedir="." default="compile" name="DbConnector">
    <property name="version" value="1.0.0" />
    <property environment="env" />
    <property name="src.dir" value="src" />
    <property name="integration.tests.dir" value="tests/integration" />
    <property name="build.dir" value="build" />
    <property name="lib.dir" value="lib" />
    <property name="dist.dir" value="dist" />
    <property name="dist.jar" value="dbconnector.jar" />
    <property name="stub.tests.dir" value="tests/stubs" />
    <property name="junit.output.dir" value="${build.dir}/junit" />
    <property name="instrumented.dir"
              value="${junit.output.dir}/instrumented" />
    <property name="coveragereport.dir" value="${junit.output.dir}/coverage" />
    <property name="cobertura.ser" value="${instrumented.dir}/cobertura.ser" />
    <property name="debuglevel" value="source,lines,vars" />
    <property name="target_ver" value="1.6" />
    <property name="source_ver" value="1.6" />

    <!-- default the datasource to use H2 unless an environment variable is set -->
    <property name="env.datasource.arg" value="-d H2" />

    <!-- import special task to deploy dependent jars within dist -->
    <property name="one-jar.dist.dir" value="${lib.dir}/one-jar" />
    <import file="${one-jar.dist.dir}/one-jar-ant-task.xml" optional="true" />

    <path id="common.classpath">
        <pathelement location="${lib.dir}/commons/commons-dbutils-1.4.jar" />
        <pathelement location="${lib.dir}/commons/commons-io-2.4.jar" />
        <pathelement location="${lib.dir}/commons/commons-naming-core-20031116.223527.jar" />
        <pathelement location="${lib.dir}/h2/h2-1.3.167.jar" />
        <pathelement location="${lib.dir}/postgres/postgresql-9.1-901.jdbc4.jar" />
        <pathelement location="${lib.dir}/postgres/tomcat-jdbc.jar" />
        <pathelement location="${lib.dir}/logging/tomcat-juli.jar" />
        <pathelement location="${lib.dir}/common/dacommon.jar" />
        <pathelement location="${lib.dir}/logging/slf4j-api-1.6.6.jar" />
    </path>

    <path id="logging.classpath">
        <pathelement location="${lib.dir}/logging/slf4j-log4j12-1.6.6.jar" />
        <pathelement location="${lib.dir}/logging/log4j-1.2.17.jar" />
    </path>

    <path id="testing.classpath">
        <pathelement location="${build.dir}" />
        <pathelement location="${integration.tests.dir}" />
        <pathelement location="${stub.tests.dir}" />
        <pathelement location="${junit.output.dir}" />
        <pathelement location="${lib.dir}/logging/slf4j-nop-1.6.6.jar" />
        <pathelement location="${lib.dir}/junit/junit-4.10.jar" />
        <pathelement location="${lib.dir}/powermock-easymock/cglib-nodep-2.2.2.jar" />
        <pathelement location="${lib.dir}/powermock-easymock/easymock-3.1.jar" />
        <pathelement location="${lib.dir}/powermock-easymock/javassist-3.16.1-GA.jar" />
        <pathelement location="${lib.dir}/powermock-easymock/objenesis-1.2.jar" />
        <pathelement location="${lib.dir}/powermock-easymock/powermock-easymock-1.4.12-full.jar" />
    </path>

    <path id="cobertura.classpath" cache="true">
        <pathelement location="${lib.dir}/coverage/cobertura-2.0.3.jar" />
        <pathelement location="${lib.dir}/coverage/asm-4.1.jar" />
        <pathelement location="${lib.dir}/coverage/asm-analysis-4.1.jar" />
        <pathelement location="${lib.dir}/coverage/asm-commons-4.1.jar" />
        <pathelement location="${lib.dir}/coverage/asm-tree-4.1.jar" />
        <pathelement location="${lib.dir}/coverage/asm-util-4.1.jar" />
        <pathelement location="${lib.dir}/coverage/oro-2.0.8.jar" />
        <pathelement location="${lib.dir}/logging/log4j-1.2.17.jar" />
    </path>

    <taskdef classpathref="cobertura.classpath" resource="tasks.properties" />
    <target name="init">
        <mkdir dir="${build.dir}" />
    </target>

    <target name="clean">
        <delete dir="${build.dir}" />
        <delete dir="${dist.dir}" />
        <delete>
            <fileset dir="." includes="*.db" />
            <fileset dir="." includes="version.xml" />
        </delete>
    </target>

    <target name="cleanall" depends="clean">
        <delete>
            <fileset dir="." includes="*.db" />
        </delete>
    </target>

    <!-- start snippet from common/commmon.xml -->

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${lib.dir}/ant-contrib/ant-contrib-1.0b3.jar" />
        </classpath>
    </taskdef>

    <property name="appName" value="${ant.project.name}" />
    <if>
        <not>
            <isset property="env.BUILD_NUMBER" />
        </not>
        <then>
            <available property="load_workstation_build"
                       file="workstation_build.xml"
                       value="true" />
        </then>
    </if>

    <if>
        <equals arg1="${load_workstation_build}" arg2="true" />
        <then>
            <ant antfile="workstation_build.xml" />
        </then>
    </if>

    <include file="version.xml"
             as="version"
             description="Create the VersionInfo class that is used at runtime to display version info for the build" />

    <extension-point name="generate-version" depends="init" />

    <!-- IMPORTANT: compile target needs to depend on "generate-version" -->

    <!-- end snippet from common/commmon.xml -->


    <target name="compile" depends="generate-version">
        <javac srcdir="${src.dir}"
               destdir="${build.dir}"
               debug="true"
               debuglevel="${debuglevel}"
               source="${source_ver}"
               target="${target_ver}"
               excludes="**/*Test.java"
               includeantruntime="false">
            <classpath refid="common.classpath" />
        </javac>
        <copy todir="${build.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>
    </target>

    <target name="compile.tests" depends="compile">
        <mkdir dir="${junit.output.dir}" />

        <javac sourcepath=""
               srcdir="${src.dir}"
               includes="**/*Test*.java"
               destdir="${junit.output.dir}"
               source="${source_ver}"
               target="${target_ver}"
               debug="true"
               debuglevel="${debuglevel}"
               includeantruntime="false">
            <src path=":${stub.tests.dir}" />
            <classpath refid="common.classpath" />
            <classpath refid="testing.classpath" />
        </javac>
    </target>

    <target name="unit.tests"
            depends="compile.tests, compile"
            description="run all unit tests">
        <junit fork="yes"
               dir="${junit.output.dir}"
               printsummary="withOutAndErr"
               haltonerror="true"
               haltonfailure="true"
               includeantruntime="true">
            <batchtest todir="${junit.output.dir}">
                <fileset dir="${junit.output.dir}">
                    <include name="**/*Test.class" />
                </fileset>
                <formatter type="xml" />
            </batchtest>

            <classpath refid="common.classpath" />
            <classpath refid="testing.classpath" />
            <classpath refid="logging.classpath" />
        </junit>

        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${junit.output.dir}" />
        </junitreport>
    </target>

    <target name="compile.itests" depends="compile.tests">
        <mkdir dir="${junit.output.dir}" />

        <javac srcdir="${integration.tests.dir}"
               includes="**/*Test.java"
               destdir="${junit.output.dir}"
               source="${source_ver}"
               target="${target_ver}"
               debug="true"
               debuglevel="${debuglevel}"
               includeantruntime="true">
            <classpath refid="common.classpath" />
            <classpath refid="testing.classpath" />
            <classpath refid="logging.classpath" />
        </javac>
    </target>

    <target name="integration.tests" depends="compile.itests">
        <junit fork="yes"
               dir="${junit.output.dir}"
               printsummary="withOutAndErr"
               haltonerror="true"
               haltonfailure="true"
               includeantruntime="true">
            <batchtest todir="${junit.output.dir}">
                <fileset dir="${integration.tests.dir}">
                    <include name="**/*Test.java" />
                </fileset>
                <formatter type="xml" />
            </batchtest>
            <classpath refid="common.classpath" />
            <classpath refid="testing.classpath" />
            <classpath refid="logging.classpath" />
        </junit>

        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml" />
            </fileset>
            <report format="frames" todir="${junit.output.dir}" />
        </junitreport>
    </target>

    <target name="coverage" depends="compile.tests">
        <mkdir dir="${instrumented.dir}" />
        <delete file="${cobertura.ser}" />

        <!-- instrument the byte code that was compiled when unit tests are run -->
        <cobertura-instrument todir="${instrumented.dir}"
                              datafile="${cobertura.ser}">
            <fileset dir="${build.dir}">
                <exclude name="**/*Test.class" />
                <include name="**/*.class" />
            </fileset>
        </cobertura-instrument>

        <copy todir="${instrumented.dir}">
            <fileset dir="${src.dir}">
                <exclude name="**/*.java" />
            </fileset>
        </copy>

        <junit fork="yes"
               dir="${basedir}"
               printsummary="withOutAndErr"
               haltonerror="true"
               haltonfailure="true"
               includeantruntime="true"
               failureproperty="test.failure">
            <!--
                Specify the name of the coverage data file to use.
                The value specified below is the default.
            -->
            <sysproperty key="net.sourceforge.cobertura.datafile"
                         file="${instrumented.dir}/cobertura.ser" />

            <!--
                Note the classpath order: instrumented classes are before the
                original (uninstrumented) classes.  This is important.
            -->
            <classpath location="${instrumented.dir}" />
            <classpath refid="common.classpath" />
            <classpath refid="testing.classpath" />
            <classpath refid="cobertura.classpath" />

            <batchtest todir="${junit.output.dir}">
                <fileset dir="${junit.output.dir}">
                    <include name="**/*Test.class" />
                </fileset>
                <formatter type="xml" />
            </batchtest>
            <jvmarg value="-XX:-UseSplitVerifier" />
        </junit>

        <mkdir dir="${coveragereport.dir}" />
        <cobertura-report format="xml"
                          destdir="${coveragereport.dir}"
                          datafile="${cobertura.ser}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>

        <cobertura-report format="html"
                          destdir="${coveragereport.dir}"
                          datafile="${cobertura.ser}">
            <fileset dir="${src.dir}">
                <include name="**/*.java" />
            </fileset>
        </cobertura-report>
    </target>


    <target name="dist"
            depends="compile"
            description="create distributable jar">
        <mkdir dir="${dist.dir}" />
        <delete file="${dist.jar}" />
        <jar destfile="${dist.dir}/${dist.jar}"
             basedir="${build.dir}"
             compress="true"
             excludes="junit/**" />
    </target>

</project>
